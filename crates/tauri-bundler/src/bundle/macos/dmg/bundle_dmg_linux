#!/usr/bin/env bash
# Copyright 2019-2024 Tauri Programme within The Commons Conservancy
# SPDX-License-Identifier: Apache-2.0
# SPDX-License-Identifier: MIT

# Create a read-only disk image of the contents of a folder
# forked from https://github.com/andreyvit/create-dmg

# Bail out on any unhandled errors
set -ex;

function pure_version() {
	echo '1.0.0.6'
}

function version() {
	echo "create-dmg $(pure_version)"
}

function usage() {
	version
	echo "Creates a fancy DMG file."
	echo "Usage:  $(basename "$0") [options] <output_name.dmg> <source_folder>"
	echo "All contents of <source_folder> will be copied into the disk image."
	echo "Options:"
	echo "  --volname name"
	echo "      set volume name (displayed in the Finder sidebar and window title)"
	echo "  --volicon icon.icns"
	echo "      set volume icon"
	echo "  --background pic.png"
	echo "      set folder background image (provide png, gif, jpg)"
	echo "  --window-pos x y"
	echo "      set position the folder window"
	echo "  --window-size width height"
	echo "      set size of the folder window"
	echo "  --text-size text_size"
	echo "      set window text size (10-16)"
	echo "  --icon-size icon_size"
	echo "      set window icons size (up to 128)"
	echo "  --icon file_name x y"
	echo "      set position of the file's icon"
	echo "  --hide-extension file_name"
	echo "      hide the extension of file"
	echo "  --app-drop-link x y"
	echo "      make a drop link to Applications, at location x,y"
	echo "  --ql-drop-link x y"
	echo "      make a drop link to user QuickLook install dir, at location x,y"
	echo "  --eula eula_file"
	echo "      attach a license file to the dmg"
	echo "  --no-internet-enable"
	echo "      disable automatic mount&copy"
	echo "  --format"
	echo "      specify the final image format (default is UDZO)"
	echo "  --add-file target_name file|folder x y"
	echo "      add additional file or folder (can be used multiple times)"
	echo "  --disk-image-size x"
	echo "      set the disk image size manually to x MB"
	echo "  --hdiutil-verbose"
	echo "      execute hdiutil in verbose mode"
	echo "  --hdiutil-quiet"
	echo "      execute hdiutil in quiet mode"
	echo "  --bless"
  echo "      bless the mount folder (deprecated, needs macOS 12.2.1 or older)"
	echo "  --sandbox-safe"
	echo "      execute hdiutil with sandbox compatibility, do not bless and do not execute the cosmetic AppleScript"
	echo "  --version         show tool version number"
	echo "  -h, --help        display this help"
	exit 0
}

WINX=10
WINY=60
WINW=500
WINH=350
ICON_SIZE=128
TEXT_SIZE=16
FORMAT="UDZO"
ADD_FILE_SOURCES=()
ADD_FILE_TARGETS=()
IMAGEKEY=""
HDIUTIL_VERBOSITY=""
SANDBOX_SAFE=0
BLESS=0
SKIP_JENKINS=0
MAXIMUM_UNMOUNTING_ATTEMPTS=3
POSITION_CLAUSE=""
HIDING_CLAUSE=""

while [[ "${1:0:1}" = "-" ]]; do
	case $1 in
	--volname)
		VOLUME_NAME="$2"
		shift; shift;;
	--volicon)
		VOLUME_ICON_FILE="$2"
		shift; shift;;
	--background)
		BACKGROUND_FILE="$2"
		BACKGROUND_FILE_NAME="$(basename "$BACKGROUND_FILE")"
		BACKGROUND_CLAUSE="set background picture of opts to file \".background:$BACKGROUND_FILE_NAME\""
		REPOSITION_HIDDEN_FILES_CLAUSE="set position of every item to {theBottomRightX + 100, 100}"
		shift; shift;;
	--icon-size)
		ICON_SIZE="$2"
		shift; shift;;
	--text-size)
		TEXT_SIZE="$2"
		shift; shift;;
	--window-pos)
		WINX=$2; WINY=$3
		shift; shift; shift;;
	--window-size)
		WINW=$2; WINH=$3
		shift; shift; shift;;
	--icon)
		POSITION_CLAUSE="${POSITION_CLAUSE}set position of item \"$2\" to {$3, $4}
		"
		shift; shift; shift; shift;;
	--hide-extension)
		HIDING_CLAUSE="${HIDING_CLAUSE}set the extension hidden of item \"$2\" to true
		"
		shift; shift;;
	-h | --help)
		usage;;
	--version)
		version; exit 0;;
	--pure-version)
		pure_version; exit 0;;
	--ql-drop-link)
		QL_LINK=$2
		QL_CLAUSE="set position of item \"QuickLook\" to {$2, $3}
		"
		shift; shift; shift;;
	--app-drop-link)
		APPLICATION_LINK=$2
		APPLICATION_CLAUSE="set position of item \"Applications\" to {$2, $3}
		"
		shift; shift; shift;;
	--eula)
		EULA_RSRC=$2
		shift; shift;;
	--no-internet-enable)
		NOINTERNET=1
		shift;;
	--format)
		FORMAT="$2"
		shift; shift;;
	--add-file | --add-folder)
		ADD_FILE_TARGETS+=("$2")
		ADD_FILE_SOURCES+=("$3")
		POSITION_CLAUSE="${POSITION_CLAUSE}
		set position of item \"$2\" to {$4, $5}
		"
		shift; shift; shift; shift; shift;;
	--disk-image-size)
		DISK_IMAGE_SIZE="$2"
		shift; shift;;
	--hdiutil-verbose)
		HDIUTIL_VERBOSITY='-verbose'
		shift;;
	--hdiutil-quiet)
		HDIUTIL_VERBOSITY='-quiet'
		shift;;
	--sandbox-safe)
		SANDBOX_SAFE=1
		shift;;
	--bless)
		BLESS=1
		shift;;
	--skip-jenkins)
		SKIP_JENKINS=1
		shift;;
	-*)
		echo "Unknown option: $1. Run with --help for help."
		exit 1;;
	esac
	case $FORMAT in
	UDZO)
		IMAGEKEY="-imagekey zlib-level=9";;
	UDBZ)
		IMAGEKEY="-imagekey bzip2-level=9";;
	esac
done

if [[ -z "$2" ]]; then
	echo "Not enough arguments. Invoke with --help for help."
	exit 1
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DMG_PATH="$1"
DMG_DIRNAME="$(dirname "$DMG_PATH")"
DMG_DIR="$(cd "$DMG_DIRNAME" > /dev/null; pwd)"
DMG_NAME="$(basename "$DMG_PATH")"
DMG_TEMP_NAME="$DMG_DIR/rw.${DMG_NAME}"
SRC_FOLDER="$(cd "$2" > /dev/null; pwd)"

# Argument validation checks

if [[ "${DMG_PATH: -4}" != ".dmg" ]]; then
	echo "Output file name must end with a .dmg extension. Run 'create-dmg --help' for help."
	exit 1
fi

if [[ -z "$VOLUME_NAME" ]]; then
	VOLUME_NAME="$(basename "$DMG_PATH" .dmg)"
fi

AUX_PATH="$SCRIPT_DIR/support"

if [[ -f "$SRC_FOLDER/.DS_Store" ]]; then
	echo "Deleting any .DS_Store in source folder"
	rm "$SRC_FOLDER/.DS_Store"
fi

# Create the image
echo "Creating disk image..."
if [[ -f "${DMG_TEMP_NAME}" ]]; then
	rm -f "${DMG_TEMP_NAME}"
fi

# mount the new DMG
echo "Create temporary folder..."
MOUNT_DIR=$(tempfile --prefix="${VOLUME_NAME}")
rm "${MOUNT_DIR}"
mkdir -p "${MOUNT_DIR}"

echo "Temp directory: $MOUNT_DIR"
rsync -a "${SRC_FOLDER}" "${MOUNT_DIR}"

if [[ -n "$BACKGROUND_FILE" ]]; then
	echo "Copying background file '$BACKGROUND_FILE'..."
	[[ -d "$MOUNT_DIR/.background" ]] || mkdir "$MOUNT_DIR/.background"
	cp "$BACKGROUND_FILE" "$MOUNT_DIR/.background/$BACKGROUND_FILE_NAME"
fi

#if [[ -n "$APPLICATION_LINK" ]]; then
#	echo "making link to Applications dir"
#	test -d "$MOUNT_DIR/Applications" || ln -s /Applications "$MOUNT_DIR/Applications"
#fi

if [[ -n "$QL_LINK" ]]; then
	echo "making link to QuickLook install dir"
	ln -s "/Library/QuickLook" "$MOUNT_DIR/QuickLook"
fi

if [[ -n "$VOLUME_ICON_FILE" ]]; then
	echo "Copying volume icon file '$VOLUME_ICON_FILE'..."
	cp "$VOLUME_ICON_FILE" "$MOUNT_DIR/.VolumeIcon.icns"
  # SetFile -c icnC "$MOUNT_DIR/.VolumeIcon.icns"
fi

if [[ -n "$ADD_FILE_SOURCES" ]]; then
	echo "Copying custom files..."
	for i in "${!ADD_FILE_SOURCES[@]}"; do
		echo "${ADD_FILE_SOURCES[$i]}"
		cp -a "${ADD_FILE_SOURCES[$i]}" "$MOUNT_DIR/${ADD_FILE_TARGETS[$i]}"
	done
fi

echo "TODO:"
echo "Set X: $WINX, Set Y: $WINY"
echo "Set width: $WINW, set height: $WINH"
echo "Reposition hidden files: $REPOSITION_HIDDEN_FILES_CLAUSE"
echo "Background: $BACKGROUND_CLAUSE"
echo "Icon size: $ICON_SIZE"
echo "Text size: $TEXT_SIZE"
echo "Position: $POSITION_CLAUSE"
echo "QL: $QL_CLAUSE"
echo "Application: $APPLICATION_CLAUSE"
echo "Hiding: $HIDING_CLAUSE"

# make sure it's not world writeable
echo "Fixing permissions..."
chmod -Rf go-w "${MOUNT_DIR}" &> /dev/null || true
echo "Done fixing permissions."

# Delete unnecessary file system events log
echo "Deleting .fseventsd"
rm -rf "${MOUNT_DIR}/.fseventsd"

# Generate ISO file
genisoimage -D -V "${VOLUME_NAME}" -no-pad -r -o "${DMG_TEMP_NAME}" "${MOUNT_DIR}"
rm -rf "${MOUNT_DIR}"

# compress image
echo "Compressing disk image..."
dmg "${DMG_TEMP_NAME}" "${DMG_DIR}/${DMG_NAME}"
rm -f "${DMG_TEMP_NAME}"

# adding EULA resources
if [[ -n "${EULA_RSRC}" && "${EULA_RSRC}" != "-null-" ]]; then
	echo "TODO: adding EULA resources"
fi

echo "Disk image done"
exit 0
